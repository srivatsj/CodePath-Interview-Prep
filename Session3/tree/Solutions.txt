public class Solution {
	public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode a) {
	    
	    ArrayList<ArrayList<Integer>> sol = new ArrayList<ArrayList<Integer>>();
	    
	    if(a == null) return sol;
	    
	    Queue<TreeNode> q = new LinkedList();
	    q.add(a);
	    boolean flag = true;
	    
	    while(!q.isEmpty()) {
	    
	        int size = q.size();
	        ArrayList<Integer> part = new ArrayList<Integer>();
	        for(int i=0; i<size; i++) {
	            TreeNode n = q.poll();
	            
	            if(flag)
	                part.add(n.val);
	            else
	                part.add(0, n.val);
	            
	            if(n.left != null)
	                q.add(n.left);
	            
	            if(n.right != null)
	                q.add(n.right);
	        }
	        
	        sol.add(part);
	        flag = !flag;
	    }
	    
	    return sol;
	}
}

public class Solution {
	public int isSameTree(TreeNode a, TreeNode b) {
	    
	    return isSame(a, b) ? 1 : 0;
	    
	}
	
	private boolean isSame(TreeNode a, TreeNode b) {
	    if(a == null && b == null)
	        return true;
	    else if(a == null || b == null)
	        return false;

        return a.val == b.val && isSame(a.left, b.left) 
        && isSame(a.right, b.right);

	}
	
}

public class Solution {
	public int isSymmetric(TreeNode a) {
	    
	    return a != null && isSame(a.left, a.right) ? 1 : 0;
	}
	
	private boolean isSame(TreeNode a, TreeNode b) {
	    if(a == null && b == null)
	        return true;
	    else if(a == null || b == null)
	        return false;

        return a.val == b.val && isSame(a.left, b.right) 
        && isSame(a.right, b.left);

	}
}
