public class Solution {
	public ArrayList<Integer> twoSum(final List<Integer> a, int b) {
	    
	    ArrayList<Integer> sol = new ArrayList();
	    Map<Integer, Integer> map = new HashMap();
	    
	    for(int i=0; i<a.size(); i++) {
	        int val = b - a.get(i);
	        if(map.containsKey(val)) {
	            sol.add(map.get(val) + 1);
	            sol.add(i + 1);
	            return sol;
	        }
	        
	        if(!map.containsKey(a.get(i))) {
	            map.put(a.get(i), i);
	        }
	    }
	    
	    return sol;
	}
}

public class Solution {
	public int diffPossible(final List<Integer> a, int b) {
	    Set<Integer> set = new HashSet();
	    
	    if(a.size() <=1) return 0;
	    
	    for(Integer i : a) {
	        int val = i - b;
	        
	        if(set.contains(val))
	            return 1;
	            
	        val = i + b;
	        
	        if(set.contains(val))
	            return 1;
	            
	       	set.add(i);
	    }
	    
	    return 0;
	}
}

public class Solution {
	public ArrayList<ArrayList<Integer>> anagrams(final List<String> a) {
	    
	    ArrayList<ArrayList<Integer>> sol = new ArrayList();
	    Map<String, ArrayList<Integer>> map = new HashMap();
	    
	    for(int i=0; i<a.size(); i++) {
	        char[] arr = a.get(i).toCharArray();
	        Arrays.sort(arr);
	        String val = new String(arr);
	        
	        if(!map.containsKey(val))
	            map.put(val, new ArrayList());
	            
	        map.get(val).add(i + 1);
	    }
	    
	    for(String k : map.keySet()) {
	        ArrayList<Integer> l = map.get(k);
	        sol.add(l);
	    }
	    
	    return sol;
	}
}

public class Solution {
	public int lengthOfLongestSubstring(String a) {
	    
	    char[] arr = a.toCharArray();
	    int start = 0;
	    Map<Character, Integer> map = new HashMap();
	    int max = 0;
	    
	    for(int i=0; i<arr.length; i++) {
	        
	        if(map.containsKey(arr[i]) && map.get(arr[i]) >= start) {
	           max = Math.max(max, i - start);
	           start = map.get(arr[i]) + 1;
	        }
	           
	        map.put(arr[i], i); 
	    }
	    
	    max = Math.max(max, arr.length - start);
	    return max;
	}
}

