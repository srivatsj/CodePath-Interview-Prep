public class Solution {
	// DO NOT MODIFY THE LIST
	public int maximumGap(final List<Integer> a) {
	    
	    int max = 0;
	    int[] l = new int[a.size()];
	    int[] r = new int[a.size()];
	    l[0] = a.get(0);
	    r[a.size() -1] = a.get(a.size() -1);
	    
	    for(int i=1; i<a.size(); i++) {
	        l[i] = Math.min(l[i-1], a.get(i));
	    }
	    
	    for(int i=a.size() -2; i>= 0; i--) {
	        r[i] = Math.max(r[i+1], a.get(i));
	    }
	    
	    int x = 0; 
	    int y = 0;
	    
	    while(x < a.size() && y <a.size()) {
	        
	        if(l[x] <= r[y]) {
	          max = Math.max(max, y - x);     
	          y++;  
	        }
	        else {
	            x++;
	        }
	    }
	    
	    return max;
	}
	
}

public class Solution {
	public int firstMissingPositive(ArrayList<Integer> a) {
	    
	    int count = 0;
	    
	    while(count < a.size()) {
	        
	        int val = a.get(count);
	        
	        while(val > 0 && val < a.size() && val != count +1 && val != a.get(val -1)) {
                a.set(count, a.get(val - 1));
                a.set(val -1, val);
                val = a.get(count);
	        }
	        
	        count++;
	    }
	    
	    for(int i=0; i<a.size(); i++) {
	        if(a.get(i) != i + 1)
	            return i + 1;
	    }
	    
	    return a.size() + 1;
	    
	}
}
