/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public ArrayList<Integer> inorderTraversal(TreeNode a) {
	    
	    ArrayList<Integer> sol = new ArrayList<Integer>();
	    Stack<TreeNode> st = new Stack();
	    
	    while(a != null || !st.isEmpty()) {
	       
	       if(a != null) {
	           st.push(a);
	           a = a.left;
	       }
	       else {
	           TreeNode n = st.pop();
	           sol.add(n.val);
	           a = n.right;
	       }
	    }
	    
	    return sol;
	}
}

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode a) {
	    
	    ArrayList<ArrayList<Integer>> sol = new ArrayList<ArrayList<Integer>>();
	    
	    if(a == null) return sol;
	    
	    Queue<TreeNode> q = new LinkedList();
	    q.add(a);
	    boolean flag = true;
	    
	    while(!q.isEmpty()) {
	    
	        int size = q.size();
	        ArrayList<Integer> part = new ArrayList<Integer>();
	        for(int i=0; i<size; i++) {
	            TreeNode n = q.poll();
	            
	            if(flag)
	                part.add(n.val);
	            else
	                part.add(0, n.val);
	            
	            if(n.left != null)
	                q.add(n.left);
	            
	            if(n.right != null)
	                q.add(n.right);
	        }
	        
	        sol.add(part);
	        flag = !flag;
	    }
	    
	    return sol;
	}
}

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public ArrayList<Integer> preorderTraversal(TreeNode a) {
	    
	    ArrayList<Integer> sol = new ArrayList<Integer>();
	    Stack<TreeNode> st = new Stack();
	    
	    if(a != null) {
	        st.push(a);
	    }
	    
	    while(!st.isEmpty()) {
	        
	        TreeNode n = st.pop();
	        sol.add(n.val);
	        
	        if(n.right != null) st.push(n.right);
	        if(n.left != null) st.push(n.left);
	        
	    }
	    
	    return sol;
	    
	}
}

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
	    
	    ArrayList<ArrayList<Integer>> sol = new ArrayList<ArrayList<Integer>>();
	    ArrayList<Integer> part = new ArrayList<Integer>();
	    check(root, sum, sol, part);
	    return sol;
	    
	}
	
	private void check(TreeNode r, int sum, ArrayList<ArrayList<Integer>> sol, ArrayList<Integer> part) {
	    
	    if(r == null) return;
	    
	    if(r.left == null && r.right == null && sum - r.val == 0) {
	        part.add(r.val);
	        sol.add(new ArrayList(part));
	        part.remove(part.size() -1);
	    }
	    
	    part.add(r.val);
	    check(r.left, sum - r.val, sol, part);
	    check(r.right, sum - r.val, sol, part);
	    part.remove(part.size() -1);
	}
}

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public int isSymmetric(TreeNode a) {
	    
	    return a != null && isSame(a.left, a.right) ? 1 : 0;
	}
	
	private boolean isSame(TreeNode a, TreeNode b) {
	    if(a == null && b == null)
	        return true;
	    else if(a == null || b == null)
	        return false;

        return a.val == b.val && isSame(a.left, b.right) 
        && isSame(a.right, b.left);

	}
}

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public int isBalanced(TreeNode a) {
	    
	    if(check(a) == -1) return 0;
	    
	    return 1;
	}
	
	private int check(TreeNode a) {
	    
	    if(a == null) return 0;
	    
	    int left = check(a.left);
	    if(left == -1) return -1;
	    
	    int right = check(a.right);
	    if(right == -1) return -1;
	    
	    if(Math.abs(left - right) > 1) return -1;
	    return Math.max(left, right) + 1;
	}
}

