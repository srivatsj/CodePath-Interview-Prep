public class Solution {
	public int sqrt(int a) {
	    
	    if(a == 0) return 0;
	    
	    int start = 1;
	    int end = a/2;
	    int ans = 1;
	    
	    while(start <= end) {
	        int mid = start + (end - start)/2;
	        
	        if(mid == a/mid) return mid;
	        else if(mid > a/mid) end = mid - 1;
	        else {
	            ans = mid;
	            start = mid + 1;
	        }
	    }
	    
	    return ans;
	}
}

public class Solution {
	public int pow(int x, int n, int d) {
	
	    long a = x;
	    long res = 1L;
	    
	    while (n > 0) {
	        
	        if (n % 2 == 1) {
	            res *= a;
	            res %= d;
	        }
	        
	        a *= a;
	        a %= d;
	        n = n >> 1;
	        
	    }
	    
	    res = (res + d) % d;
	    
	    return (int) res;
	}
	
}

public class Solution {
	// DO NOT MODIFY THE LIST
	public ArrayList<Integer> searchRange(final List<Integer> a, int b) {
	    
	    int start = 0;
	    int end = a.size() - 1;
	    ArrayList<Integer> sol = new ArrayList<Integer>();
	    int x = -1;
	    int y = -1;
	    
	    while(start <= end) {
	        int mid = start + (end - start)/2;
	        int val = a.get(mid);
	        
	        if(val == b) {
	            x = mid;
	            end = mid -1;
	        }
	        else if(val > b)
	            end = mid -1;
	        else
	            start = mid+1;
	    }
	    
	    if(x == -1)
	    {
	        sol.add(-1);
	        sol.add(-1);
	        return sol;
	    }
	        
	    sol.add(x);
	    start = x;
	    end = a.size() -1;
	    
	    while(start <= end) {
	        int mid = start + (end - start)/2;
	        int val = a.get(mid);
	        
	        if(val == b) {
	            y = mid;
	            start = mid +1;
	        }
	        else if(val > b)
	            end = mid -1;
	        else
	            start = mid+1;
	    }
	    
	    sol.add(y);
	    return sol;
	}
}

public class Solution {
	public int searchMatrix(ArrayList<ArrayList<Integer>> a, int b) {
	
	    int start = 0;
	    int end = (a.size() * a.get(0).size()) -1;
	    int col = a.get(0).size();
	    
	    while(start <= end) {
	        int mid = start + (end - start)/2;
	        int val = a.get(mid/col).get(mid%col);
	        
	        if(val == b)
	            return 1;
	        else if(val < b)
	            start = mid + 1;
	        else
	            end = mid -1;
	    }
	    
	    return 0;
	}
}

public class Solution {
	public int searchInsert(ArrayList<Integer> a, int b) {
	    
	    int start = 0;
	    int end = a.size() -1;

	    while(start <= end) {
	        int mid = start + (end - start)/2;
	        
	        if(a.get(mid)  == b) {
	            return mid;
	        }
	        else if(a.get(mid) > b) {
	            end = mid - 1;
	            
	        }
	        else {
	            start = mid + 1;
	        }
	    }
	    
	    return start;
	}
}
