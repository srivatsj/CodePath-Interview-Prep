//Palindrome String
public class Solution {
	public int isPalindrome(String a) {
	    char[] arr = a.toCharArray();
	    int i = 0 ;
	    int j = a.length() -1;
	    
	    while(i < j) {
	        
	        while(i < j && !Character.isLetterOrDigit(arr[i])) i++;
	        
	        while(i < j && !Character.isLetterOrDigit(arr[j])) j--;
	        
	        if(Character.toLowerCase(arr[i]) != Character.toLowerCase(arr[j])) return 0;
	        i++;
	        j--;
	    }
	    
	    return 1;
	}
}

//Length Of Last Word
public class Solution {
	public int lengthOfLastWord(final String a) {
	    
	    int count = 0;
	    
	    for(int i=a.length() -1; i>=0; i--) {
	        
	        if(a.charAt(i) == ' ' && count > 0) break;
	        if(a.charAt(i) != ' ')count++;
	    } 
	    
	    return count;
	}
}

//Minimum Characters Required To Make A String Palindromic
public class Solution {
    public int solve(String A) {
    
        char[] arr = A.toCharArray();
        int max = 0;
        int end = 0;
        
        for(int i=0; i<arr.length; i++) {
            
            int odd = isPalindrome(arr, i, i);
            if(odd > max) {
                max = Math.max(max, odd);
                end = odd;
            }
                    
            int even = isPalindrome(arr, i, i + 1);
            if(even > max) {
                max = Math.max(max, even);
                end = even;
            }
        }
        
        return arr.length - end;        
    }
    
    private int isPalindrome(char[] arr, int start, int end) {
        
        while(start >=0 && end < arr.length) {
            
            if(arr[start] != arr[end]) break;
            start--;
            end++;
        }
        
        return start < 0 ? end : -1;
    }
}

